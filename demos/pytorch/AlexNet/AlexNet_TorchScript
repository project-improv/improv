from torchvision.models import alexnet, AlexNet_Weights.DEFAULT

class AN(nn.Module):

    def __init__(self, weights=AlexNet_Weights.DEFAULT):
        super().__init__()
        self.weights = weights
        self.alexnet = alexnet(weights=self.weights, progress=True).eval()
        self.transforms = weights.transforms()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        with torch.no_grad():
            x = self.transforms(x)
            return self.alexnet(x)

example = torch.rand(1, 3, 224, 224)

# Use torch.jit.trace to generate a torch.jit.ScriptModule via tracing.
traced_script_module = torch.jit.trace(model, example)

# Save the TorchScript model
traced_script_module.save("traced_resnet_model.pt")

predictor = Predictor().to(device)
scripted_predictor = torch.jit.script(predictor).to(device)

batch = torch.stack([dog1, dog2]).to(device)

res = predictor(batch)
res_scripted = scripted_predictor(batch)