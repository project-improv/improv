[build-system]
requires = ["setuptools", "setuptools-scm", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "improv"
description = "Platform for adaptive neuroscience experiments"
authors = [{name = "Anne Draelos", email = "adraelos@umich.edu"}, 
            {name = "John Pearson", email = "john.pearson@duke.edu"}]

license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.6"
keywords = ["neuroscience", "adaptive", "closed loop"]
dependencies = [
    "numpy",
    "scipy",
    "matplotlib",
    "pyarrow==9.0.0",
    "PyQt5",
    "lmdb",
    "pyyaml",
    "textual==0.15.0",
    "pyzmq",
    "psutil",
    "h5py",
]
classifiers = ['Development Status :: 1 - Planning']
dynamic = ["version"]

[project.optional-dependencies]
tests = ["pytest", "async-timeout", "pytest-asyncio", "pytest-cov", "scikit-image",]
docs = ["jupyter-book", "sphinx-autoapi==2.0.1", "astroid==2.15.5"]
lint = ["black", "flake8", "Flake8-pyproject", "flake8-pytest-style"]

[project.scripts]
improv = "improv.cli:default_invocation"

[tool.setuptools.packages.find]
include = ["improv"]
exclude = ["test", "pytest", "env", "demos", "figures"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = [ ]

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

pythonpath = ["."]

[tool.flake8]
# Recommend matching the black line length (default 88),
# rather than using the flake8 default of 79:
ignore = ['E203', 'W503']
max-line-length = 88
    # See https://github.com/PyCQA/pycodestyle/issues/373
per-file-ignores = """
    test/test_demos.py:F401,F811
    test/test_cli.py:F401,F811
    test/test_tui.py:F401,F811
    test/test_link.py:PT012
    test/test_nexus.py:PT012
    test/test_store_with_errors.py:PT012
    improv/__init__.py:F401
    """
exclude = ["demos", "build"]

[tool.black]
line-length = 88
exclude = '''
/(
    demos
  | build
)/
'''

[tool.versioningit]

[tool.versioningit.vcs]
match = ["v*"]

[tool.versioningit.next-version]
method = "smallest"

[tool.versioningit.format]
# Format used when there have been commits since the most recent tag:
distance = "{next_version}.dev{distance}"
# Example formatted version: 1.2.4.dev42+ge174a1f

# Format used when there are uncommitted changes:
dirty = "{base_version}+d{build_date:%Y%m%d}"
# Example formatted version: 1.2.3+d20230922

# Format used when there are both commits and uncommitted changes:
distance-dirty = "{next_version}.dev{distance}+{vcs}{rev}.d{build_date:%Y%m%d}"
# Example formatted version: 1.2.4.dev42+ge174a1f.d20230922

[tool.versioningit.write]
file = "improv/_version.py"